	#!/bin/sh
##############################################################################################################
#funcion de el juego de gato
function juego_gato(){

clear
echo "Nombre de jugador 1:"
read nombre_de_jugador_1
echo "Nombre de jugador 2:"
read nombre_de_jugador_2


numero_jugador1=$((RANDOM % 9))
numero_jugador2=$((RANDOM % 9))
borrar_formato_de_letra="\033[0m"

#Asignar color a usuario 1
   case $numero_jugador1 in
          0) color_jugador1="\033[1;31m";; #ROJO
          1) color_jugador1="\033[1;30m";; #NEGRO
          2) color_jugador1="\033[1;32m";; #VERDE
          3) color_jugador1="\033[1;33m";; #AMARILLO
          4) color_jugador1="\033[1;34m";; #AZUL FUERTE
          5) color_jugador1="\033[1;35m";; #MORADO
          6) color_jugador1="\033[1;36m";; #AZUL CLARO
          7) color_jugador1="\033[1;37m";; #BLANCO
      *) color_jugador1="\033[1;31m";; #ROJO
    esac
#Asignar color a usuario 2
  case $numero_jugador2 in
          0) color_jugador2="\033[1;31m";; #ROJO
          1) color_jugador2="\033[1;30m";; #NEGRO
          2) color_jugador2="\033[1;32m";; #VERDE
          3) color_jugador2="\033[1;33m";; #AMARILLO
          4) color_jugador2="\033[1;34m";; #AZUL FUERTE
          5) color_jugador2="\033[1;35m";; #MORADO
          6) color_jugador2="\033[1;36m";; #AZUL CLARO
          7) color_jugador2="\033[1;37m";; #BLANCO
      *) color_jugador2="\033[1;34m";; #AZUL FUERTE
    esac

#Evitar que el color de los jugadores sea el mismo
if [ $color_jugador1 = $color_jugador2 ]
then
    color_jugador1="\033[1;31m"
    color_jugador2="\033[1;34m"
fi
clear
#Pedir y guardar el nombre de los jugadores


clear #Limpiar pantalla

#Variables que van a contener el texto con formato de los nombres de los usuarios
jugador_1=$color_jugador1"$nombre_de_jugador_1"$borrar_formato_de_letra
jugador_2=$color_jugador2"$nombre_de_jugador_2"$borrar_formato_de_letra


#Aqui acaba la parte en la que definimos los nombres y todo eso

posiciones=(- - - - - - - - -)  # vector de posiciones

turno_jugador_1=true  # Inicializa la ronda con el jugador 1
final_de_ronda=false  #Estado de la ronda
accion_invalida=false  #Accion invalida 

function dibujar_gato { #funcion que va a dibujar el gato cada turno
  
  clear

  posiciones_guardadas=$1[@]  # La funcion lee las posiciones guardadas en el vector y con ellas funciona
  posiciones=("${!posiciones_guardadas}") # nuevo valor del vector
  banner "FIGHT!" 
echo -e "\t    "$jugador_1" VS "$jugador_2 "\n\n"
  for (( fila=1; fila<=3; fila++ ));do #En este for se va a hacer las filas tanto vacías como con caracteres
    
    espacio="    " #Son los espacios de las filas en donde pueden estar X o O
    espacio_vacio="    " #Son los espacios de las filas en donde no van a estar X o O
    for (( columna=1; columna<$((30)); columna++ ));do
            
      if [[ $(( $columna%((10)) )) == 0 ]]; then #Cada desima columna ponemos un espacio y la barra | que formara el gato
        espacio=$espacio"|" 
        espacio_vacio=$espacio_vacio"|" #en ambos tipos de espacios creamos el | para que sea una linea "continua"
      else
        if [[ $(( $columna%5 )) == 0 ]]; then #SI es verdad, en estos puntos es donde se encuentra el espacio que tiene a X o O

          x=$(($fila-1))
          y=$((($columna - 5) / 10))

          if [[ $x == 0 ]]; then
            simbolo=${posiciones[$y]} #Analiza el valor que tiene el vector posición en cada espacio centrico del gato
          elif [[ $x == 1 ]]; then
            simbolo=${posiciones[(($y+3))]} #Guarda el valor de esa posicion, ya sea X o O
          else
            simbolo=${posiciones[(($y+6))]}
          fi

          
          if [[ $simbolo == "-" ]]; then simbolo=" "; fi # Si el simbolo resulta - es porque ninguno de los jugadores ha escogido esa posicion y se guarda el simbolo actual como vacío

          if [[ $simbolo == "X" ]] ; then  # Si el simbolo es X, el jugador 1 ya había seleccionado ese espacio
            espacio=$espacio$color_jugador1$simbolo$borrar_formato_de_letra # vuelve a poner una X con el color del jugador en ese espacio
          else
            espacio=$espacio$color_jugador2$simbolo$borrar_formato_de_letra
          fi

          espacio_vacio=$espacio_vacio" "  # Agrega un esacio en vez de un símbolo, porque esa casilla aun no se escoge
        else  # EL espacio no es de los que contiene a X o O por lo que se remplaza con
          espacio=$espacio" "
          espacio_vacio=$espacio_vacio" "
        fi
      fi
    done
   echo -e "$espacio_vacio""\n""$espacio""\n""$espacio_vacio" #imprime los espacios de las filas
    if [[ $fila != 3 ]]; then
      echo -e "       __ __ __ __ __ __ __ __        " #imprime las lineas horizontales
    fi
  done
  echo -e "\n"

  echo -e "            COMANDOS      "
  echo -e "            1 \ 2 \ 3       "
  echo -e "           ----\---\----    "
  echo -e "              4 \ 5 \ 6     "
  echo -e "             ----\---\----  "
  echo -e "                7 \ 8 \ 9   "
  echo -e "\n"
}

function analizar_jugadas { #Funcion que va a leer el movimiento hecho cada turno

  caracteres_posiciones=$(printf "%s" "${posiciones[@]}") #convertimos el vector en un conjunto de caracteres

  analizar_estado_partida $caracteres_posiciones #Analiza si el juego ha terminado

  if [ "$final_de_ronda" = false ] ; then #si la ronda aun no acaba

    if [ "$accion_invalida" = false ] ; then # si la accion es valida
      if [ "$turno_jugador_1" = true ] ; then #si es el turno del jugador 1
        echo -e "\t   Turno de "$jugador_1 #el signo va a ser X
        signo="X"
        turno_jugador_1=false #cambio de turno
      else
        echo -e "\t   Turno de "$jugador_2 # el signo va a ser O
        signo="O"
        turno_jugador_1=true #cambio de turno
      fi
    else
      accion_invalida=false
    fi

    read -d'' -s -n1 seleccion  # leer el comando del jugador

    casilla=343270  # inicializa casilla con cualquier numero que no sea valido en caso de que el primer comando que haga no sea valido
    case $seleccion in
          1) casilla=0;;
          2) casilla=1;;
          3) casilla=2;;
          4) casilla=3;;
          5) casilla=4;;
          6) casilla=5;;
          7) casilla=6;;
          8) casilla=7;;
          9) casilla=8;;
    esac

    if [ "${posiciones["$casilla"]}" == "-" ]; then
      posiciones["$casilla"]=$signo 
    else
      accion_invalida=true  # De otra forma la seleccion del jugador sería invalida
    fi

    activar_ronda  # Mientras la ronda no haya acabado, se seguira realizando el programa
  fi


}
function activar_ronda {
  dibujar_gato posiciones
  analizar_jugadas
}

function finalizar_ronda {
  final_de_ronda=true
  dibujar_gato posiciones
}

function analizar_estado_partida { #analizamos los caracteres para saber si algun jugador ha ganado
  espacios=${1:0:3}" "${1:3:3}" "${1:6:8}
  columnas=${1:0:1}${1:3:1}${1:6:1}" "${1:1:1}${1:4:1}${1:7:1}" "${1:2:1}${1:5:1}${1:8:1}
  diagonales=${1:0:1}${1:4:1}${1:8:1}" "${1:2:1}${1:4:1}${1:6:1}
  if [[ $espacios =~ [X]{3,} || $columnas =~ [X]{3,} || $diagonales =~ [X]{3,} ]]; then
    finalizar_ronda
    echo -e "\t  "$jugador_1" ha ganado! \n"
    return
  fi
  if [[ $espacios =~ [O]{3,} || $columnas =~ [O]{3,} || $diagonales =~ [O]{3,} ]]; then
    finalizar_ronda
    echo -e "\t  "$jugador_2" ha ganado"
    return
  fi
  if [[ ! $caracteres_posiciones =~ [-] ]]; then  # todas las posiciones se ocuparon por lo que es un empate
    finalizar_ronda
    echo -e "\t\tEmpate \n"
  fi
}

activar_ronda

}
####################################################################################################################################
	#Definimos los colores de el usuario y el prompt
numero_usuario=$((RANDOM % 9))
numero_prompt=$((RANDOM % 9))
borrar_formato_de_letra="\033[0m"

      	  rojo="\033[1;31m" #ROJO
          negro="\033[1;30m" #NEGRO
          verde="\033[1;32m" #VERDE
          amarillo="\033[1;33m" #AMARILLO
          azulf="\033[1;34m" #AZUL FUERTE
          morado="\033[1;35m" #MORADO
          azulc="\033[1;36m" #AZUL CLARO
          blanco="\033[1;37m" #BLANCO

#Asignar color a usuario 1
   case $numero_usuario in
          0) color_usuario="\033[1;31m";; #ROJO
          1) color_usuario="\033[1;30m";; #NEGRO
          2) color_usuario="\033[1;32m";; #VERDE
          3) color_usuario="\033[1;33m";; #AMARILLO
          4) color_usuario="\033[1;34m";; #AZUL FUERTE
          5) color_usuario="\033[1;35m";; #MORADO
          6) color_usuario="\033[1;36m";; #AZUL CLARO
          7) color_usuario="\033[1;37m";; #BLANCO
      *) color_usuario="\033[1;31m";; #ROJO
    esac
#Asignar color a usuario 2
  case $numero_prompt in
          0) color_prompt="\033[1;31m";; #ROJO
          1) color_prompt="\033[1;30m";; #NEGRO
          2) color_prompt="\033[1;32m";; #VERDE
          3) color_prompt="\033[1;33m";; #AMARILLO
          4) color_prompt="\033[1;34m";; #AZUL FUERTE
          5) color_prompt="\033[1;35m";; #MORADO
          6) color_prompt="\033[1;36m";; #AZUL CLARO
          7) color_prompt="\033[1;37m";; #BLANCO
      *) color_prompt="\033[1;34m";; #AZUL FUERTE
    esac

#Evitar que el color de los jugadores sea el mismo
if [ $color_usuario = $color_prompt ]
then
    color_usuario="\033[1;31m"
    color_prompt="\033[1;34m"
fi
usuario=$color_usuario"luis"$borrar_formato_de_letra
prompt=$color_prompt"@:~$PWD$"$borrar_formato_de_letra
################################################################################################################################3
clear
echo  -e "Prebeshell activa"
while [ "$respuesta" != "salir" ];
do

 echo   -e -n  $usuario$prompt
 read -e respuesta
   
case $respuesta in 

		gato)	
			juego_gato
			;;

		lucky)	
			#hacer comando que muestre tipo arbol
			;;

		prebeplayer)	
			#hacer comando que muestre tipo arbol
			;;


		ayuda)	
			echo -e "Los comandos son los siguientes:\n"
			echo -e $rojo"arbol2 - crea una imagen gráfica de la estructura de directorios actuales\n"$borrar_formato_de_letra
			echo -e $negro"ayuda - despliega en pantalla informacion relevante acerca de las funciones con las que cunenta la prebeshell, además de una breve descripción de cada uno de ellos y su funcionamiento\n"$borrar_formato_de_letra
			echo -e $verde"buscar <archivo> <directorio> - busca un directorio especificado en un directorio igualmente especificado creditos - imprime los creditos de la prebeshell\n"$borrar_formato_de_letra
			echo -e $azulc"creditos - mustra los creditos e informacion de los creadores de la prebeshell\n"$borrar_formato_de_letra
			echo -e $amarillo"dia - muestra el dia actual\n"$borrar_formato_de_letra
			echo -e $azulf"gato - activa el juego para dos de gato\n"$borrar_formato_de_letra
			echo -e $morado"hora - muestra la hora actual\n"$borrar_formato_de_letra
			echo -e $azulc"infosis - muestra informacion del sistema\n"$borrar_formato_de_letra
			echo -e $blanco"lucky - activa el juego de azar\n"$borrar_formato_de_letra
			echo -e $negro"prebeplayer - ejecuta el reproductor mp3"$borrar_formato_de_letra
			;;
		creditos)	
			echo -e $azulc"PROTECO generación 35"
			echo -e "Prebeshell"
			echo -e "Prebecarios 4 y 6"
			echo -e "Silva Sandoval Cecilia"
			echo -e "Garrido Mendoza Luis Alberto"$borrar_formato_de_letra
			;;
		arbol2)	
			#hacer comando que muestre tipo arbol
			;;

		infosis)	
			#hacer comando que muestre info de sistema
			;;

		buscar)
			#hacer el comando de buscar
			;;

		hora)
			date '+%H:%M'
			;;
		dia)
			date '+%W - %B - %Y'

			;;
			*)
			$respuesta

		esac

done
